#!/bin/bash
if (($# < 2)); then
  exit
fi

function create_world_file() {
  world_folder="$results_folder/$1/$2"
  mkdir "$world_folder" -p
  ./get_world_info "$2" >> "$world_folder/world.json"
}

function launch_experiment() {
  experiment_name=$1
  shift
  world_name=$1
  shift
  group_name=$1
  shift
  set_name=$1
  shift
  results_folder="/home/german/simulation/results/$experiment_name"
  set_folder="$results_folder/$group_name/$world_name/$set_name"
  mkdir "$set_folder" -p

  result_file=${set_folder}/episodes.json
  configuration="$@"
  command="./habit $world_name $configuration"
  worker -c "$workers" "$command" "$result_file" "$results_folder/errors.err"
}


settings_file=$1
reward_config_file=$2
experiment_name=$3

if [[ ! -f $settings_file ]]
then
    echo "Can't process. Experiment file '$settings_file' not found."
    exit
fi

if [[ ! -f $reward_config_file ]]
then
    echo "Can't process. Reward config file '$reward_config_file' not found."
    exit
fi

success_reward=$(json -f "$reward_config_file" -v "value['success_reward']")
fail_reward=$(json -f "$reward_config_file" -v "value['fail_reward']")
default_reward=$(json -f "$reward_config_file" -v "value['default_reward']")
step_cost=$(json -f "$reward_config_file" -v "value['step_cost']")
discount=$(json -f "$reward_config_file" -v "value['discount']")

rewards_config="-success_reward $success_reward -fail_reward $fail_reward -default_reward $default_reward -step_cost $step_cost -discount $discount"

results_folder="/home/german/simulation/results/$experiment_name"

if [[ -d $results_folder ]]
then
    echo "Can't process. Result folder '$results_folder' already exists."
    exit
fi


shift
shift
shift
command="run_experiment settings.json reward_config.json $experiment_name $@"

experiment_configuration=$(echo "$@")
iterations=$(params iterations 1 $experiment_configuration)
workers=$(params workers 18 $experiment_configuration)

start=$(date +%s)
mkdir "$results_folder"

cp "$settings_file" "$results_folder/settings.json"
cp "$reward_config_file" "$results_folder/reward_config.json"
settings_file=$results_folder/settings.json


cn=$(./get_commit_number)
setting_count=$(python3 -c "import sys, json; print(len(json.load(sys.stdin)))" < "$settings_file")
echo "Running experiment $experiment_name ($iterations iterations in $setting_count worlds on $workers threads):"
printf "Creating folder structure..."
while IFS= read -r world
do
  create_world_file $world
done <<< $(json -f $settings_file -l -v "value['group'] + ' ' + value['world']" | unique)

simulations=0
setting_ind=0
while IFS= read -r setting
do
  setting_ind=$((setting_ind + 1))
  simulations=$((simulations + iterations))
  launch_experiment $experiment_name $setting $experiment_configuration -seed 0 $rewards_config
  end=$(date +%s)
  runtime=$((end-start))
  gauge -s 80 -w "$setting_count" -p $setting_ind -n "$setting ($runtime seconds)" -d &
done <<< $(json -f "$settings_file" -l -v "value['world']+' '+value['group']+' '+value['set']+' '+ value['configuration']+' '")
worker -w
gauge -s 80 -w "$setting_count" -p "$setting_count" -n "$simulations simulations complete in $runtime seconds ($((simulations/runtime)) simulations per sec.)"
echo "{ \"experiment_name\": \"$experiment_name\", \"command\": \"$command\", \"code_version\": { $cn }, \"date_time\": \"$(date +'%Y-%m-%d %H:%M:%S')\", \"execution_time\": $runtime }" > "${results_folder}"/experiment.json
